use std::{
    io::{self, BufRead, BufReader},
    net::{TcpListener, TcpStream},
    thread,
};

fn main() {
    let listener = TcpListener::bind("127.0.0.1:8080").unwrap();
    for stream in listener.incoming() {
        match stream {
            Ok(stream) => {
                handle_stream(stream);
            }
            Err(e) => {
                println!("Connection failed. Error: {}", e);
            }
        }
    }
}

fn handle_stream(s: TcpStream) {
    let mut reader = BufReader::new(s);

    let rh = thread::spawn(move || {
        loop {
            let mut s = String::new();
            let received = reader.read_line(&mut s).unwrap();
            if received == 0 {
                break;
            }
            print!("{}", s);
            s.clear();
        }

        println!("Connection closed.");
    });

    let sh = thread::spawn(move || loop {
        let mut buffer = String::new();
        io::stdin().read_line(&mut buffer).unwrap();
        print!("About to send: {}", buffer);
    });

    rh.join().expect("rh join failed");
    sh.join().expect("sh join failed");
}
